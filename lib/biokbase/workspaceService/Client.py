############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
# Passes on URLError, timeout, and BadStatusLine exceptions.
#     See: 
#     http://docs.python.org/2/library/urllib2.html
#     http://docs.python.org/2/library/httplib.html
#
############################################################

try:
    import json
except ImportError:
    import sys
    sys.path.append('simplejson-2.3.3')
    import simplejson as json
    
import urllib2, httplib, urlparse, random, base64, httplib2
from urllib2 import URLError, HTTPError
from ConfigParser import ConfigParser
import os

_CT = 'content-type'
_AJ = 'application/json'
_URL_SCHEME = frozenset(['http', 'https']) 

# This is bandaid helper function until we get a full
# KBase python auth client released
def _get_token( user_id, password,
                auth_svc="https://nexus.api.globusonline.org/goauth/token?grant_type=client_credentials"):
    h = httplib2.Http( disable_ssl_certificate_validation=True)
    
    auth = base64.encodestring( user_id + ':' + password )
    headers = { 'Authorization' : 'Basic ' + auth }
    
    h.add_credentials(user_id, password)
    h.follow_all_redirects = True
    url = auth_svc
    
    resp, content = h.request(url, 'GET', headers=headers)
    status = int(resp['status'])
    if status>=200 and status<=299:
        tok = json.loads(content)
    elif status == 403: 
        raise Exception( "Authentication failed: Bad user_id/password combination %s:%s" % (user_id, password))
    else:
        raise Exception(str(resp))
        
    return tok['access_token']

# Another bandaid to read in the ~/.authrc file if one is present
def _read_rcfile( file=os.environ['HOME']+"/.authrc"):
    authdata = None
    if os.path.exists( file):
        try:
            with open( file ) as authrc:
                rawdata = json.load( authrc)
                # strip down whatever we read to only what is legit
                authdata = { x : rawdata.get(x) for x in ( 'user_id', 'auth_token',
                                                           'client_secret', 'keyfile',
                                                           'keyfile_passphrase','password')}
        except Exception, e:
            print "Error while reading authrc file %s: %s" % (file, e)
    return authdata

# Another bandaid to read in the ~/.kbase_config file if one is present
def _read_inifile( file=os.environ.get('KB_DEPLOYMENT_CONFIG',os.environ['HOME']+"/.kbase_config")):
    authdata = None
    if os.path.exists( file):
        try:
            config = ConfigParser()
            config.read(file)
            # strip down whatever we read to only what is legit
            authdata = { x : config.get('authentication',x) if config.has_option('authentication',x) else None for x in
                         ( 'user_id', 'auth_token','client_secret', 'keyfile','keyfile_passphrase','password') }
        except Exception, e:
            print "Error while reading INI file %s: %s" % (file, e)
    return authdata

class ServerError(Exception):

    def __init__(self, name, code, message):
        self.name = name
        self.code = code
        self.message = '' if message is None else message

    def __str__(self):
        return self.name + ': ' + str(self.code) + '. ' + self.message
        
class JSONObjectEncoder(json.JSONEncoder):
  
    def default(self, obj):
        if isinstance(obj, set):
            return list(obj)
        if isinstance(obj, frozenset):
            return list(obj)
        return json.JSONEncoder.default(self, obj)

class workspaceService:

    def __init__(self, url = None, timeout = 30 * 60, user_id = None, 
                 password = None, token = None, ignore_authrc = False):
        if url is None:
            raise ValueError('A url is required')
        scheme, _, _, _, _, _ = urlparse.urlparse(url)
        if scheme not in _URL_SCHEME:
            raise ValueError(url + " isn't a valid http url")
        self.url = url
        self.timeout = int(timeout)
        self._headers = dict()
        # token overrides user_id and password
        if token is not None:
            self._headers['AUTHORIZATION'] = token
        elif user_id is not None and password is not None:
            self._headers['AUTHORIZATION'] = _get_token( user_id, password)
        elif 'KB_AUTH_TOKEN' in os.environ:
            self._headers['AUTHORIZATION'] = os.environ.get('KB_AUTH_TOKEN')
        elif not ignore_authrc:
            authdata = _read_inifile()
            if authdata is None:
                authdata = _read_rcfile()
            if authdata is not None:
                if authdata.get('auth_token') is not None:
                    self._headers['AUTHORIZATION'] = authdata['auth_token']
                elif authdata.get('user_id') is not None and authdata.get('password') is not None:
                    self._headers['AUTHORIZATION'] = _get_token( authdata['user_id'],authdata['password'] )
        if self.timeout < 1:
            raise ValueError('Timeout value must be at least 1 second')

    def load_media_from_bio(self, params):

        arg_hash = { 'method': 'workspaceService.load_media_from_bio',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def import_bio(self, params):

        arg_hash = { 'method': 'workspaceService.import_bio',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def import_map(self, params):

        arg_hash = { 'method': 'workspaceService.import_map',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def save_object(self, params):

        arg_hash = { 'method': 'workspaceService.save_object',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def delete_object(self, params):

        arg_hash = { 'method': 'workspaceService.delete_object',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def delete_object_permanently(self, params):

        arg_hash = { 'method': 'workspaceService.delete_object_permanently',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_object(self, params):

        arg_hash = { 'method': 'workspaceService.get_object',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_object_by_ref(self, params):

        arg_hash = { 'method': 'workspaceService.get_object_by_ref',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def save_object_by_ref(self, params):

        arg_hash = { 'method': 'workspaceService.save_object_by_ref',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_objectmeta(self, params):

        arg_hash = { 'method': 'workspaceService.get_objectmeta',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_objectmeta_by_ref(self, params):

        arg_hash = { 'method': 'workspaceService.get_objectmeta_by_ref',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def revert_object(self, params):

        arg_hash = { 'method': 'workspaceService.revert_object',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def copy_object(self, params):

        arg_hash = { 'method': 'workspaceService.copy_object',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def move_object(self, params):

        arg_hash = { 'method': 'workspaceService.move_object',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def has_object(self, params):

        arg_hash = { 'method': 'workspaceService.has_object',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def object_history(self, params):

        arg_hash = { 'method': 'workspaceService.object_history',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def create_workspace(self, params):

        arg_hash = { 'method': 'workspaceService.create_workspace',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_workspacemeta(self, params):

        arg_hash = { 'method': 'workspaceService.get_workspacemeta',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_workspacepermissions(self, params):

        arg_hash = { 'method': 'workspaceService.get_workspacepermissions',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def delete_workspace(self, params):

        arg_hash = { 'method': 'workspaceService.delete_workspace',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def clone_workspace(self, params):

        arg_hash = { 'method': 'workspaceService.clone_workspace',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def list_workspaces(self, params):

        arg_hash = { 'method': 'workspaceService.list_workspaces',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def list_workspace_objects(self, params):

        arg_hash = { 'method': 'workspaceService.list_workspace_objects',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def set_global_workspace_permissions(self, params):

        arg_hash = { 'method': 'workspaceService.set_global_workspace_permissions',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def set_workspace_permissions(self, params):

        arg_hash = { 'method': 'workspaceService.set_workspace_permissions',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_user_settings(self, params):

        arg_hash = { 'method': 'workspaceService.get_user_settings',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def set_user_settings(self, params):

        arg_hash = { 'method': 'workspaceService.set_user_settings',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def queue_job(self, params):

        arg_hash = { 'method': 'workspaceService.queue_job',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def set_job_status(self, params):

        arg_hash = { 'method': 'workspaceService.set_job_status',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_jobs(self, params):

        arg_hash = { 'method': 'workspaceService.get_jobs',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def get_types(self, ):

        arg_hash = { 'method': 'workspaceService.get_types',
                     'params': [],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def add_type(self, params):

        arg_hash = { 'method': 'workspaceService.add_type',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def remove_type(self, params):

        arg_hash = { 'method': 'workspaceService.remove_type',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')

    def patch(self, params):

        arg_hash = { 'method': 'workspaceService.patch',
                     'params': [params],
                     'version': '1.1',
                     'id': str(random.random())[2:]
                     }

        body = json.dumps(arg_hash, cls = JSONObjectEncoder)
        try:
            request = urllib2.Request( self.url, body, self._headers)
#            ret = urllib2.urlopen(self.url, body, timeout = self.timeout)
            ret = urllib2.urlopen(request, timeout = self.timeout)
        except HTTPError as h:
            if _CT in h.headers and h.headers[_CT] == _AJ:
                b = h.read()
                err = json.loads(b) 
                if 'error' in err:
                    raise ServerError(**err['error'])
                else:            #this should never happen... but if it does 
                    se = ServerError('Unknown', 0, b)
                    se.httpError = h
                    raise se
                    #raise h      #  h.read() will return '' in the calling code.
            else:
                raise h
        if ret.code != httplib.OK:
            raise URLError('Received bad response code from server:' + ret.code)
        resp = json.loads(ret.read())

        if 'result' in resp:
            return resp['result'][0]
        else:
            raise ServerError('Unknown', 0, 'An unknown server error occurred')



